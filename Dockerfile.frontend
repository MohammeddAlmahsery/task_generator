###############################
# Frontend Multi-Stage Dockerfile
###############################

FROM node:18-alpine AS base
WORKDIR /app
RUN apk add --no-cache libc6-compat curl
ENV PNPM_HOME=/pnpm
ENV PATH=$PNPM_HOME:$PATH
RUN corepack enable

# 1. Dependencies layer (only lock + manifest for caching)
FROM base AS deps
COPY frontend/package.json ./
# Always generate fresh lockfile in container - completely isolated from local
RUN pnpm install --lockfile-only
RUN pnpm install --frozen-lockfile

# 2. Build layer
FROM base AS build
ENV NODE_ENV=production
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/pnpm-lock.yaml ./pnpm-lock.yaml
COPY frontend ./
# Build Next.js (will also run Tailwind through PostCSS)
RUN pnpm build

# 3. Production runtime (minimal)
FROM node:18-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production
RUN apk add --no-cache curl

# Create non-root user
RUN addgroup -g 1001 -S nodejs && adduser -S nextjs -u 1001

# Copy only necessary build output
COPY --from=build /app/public ./public
COPY --from=build /app/.next/standalone ./
COPY --from=build /app/.next/static ./.next/static
COPY --from=build /app/package.json ./

USER nextjs
EXPOSE 3000

HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

ENV PORT=3000
CMD ["node", "server.js"]