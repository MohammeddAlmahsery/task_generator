{
  "## Step-by-Step Plan": "**Week 1: Analysis & Policy Definition**\n\n*   **1. Onboarding & Environment Setup:**\n    *   Thoroughly review the Project \"Nexus\" documentation, focusing on the `Technical Architecture (2.0)`, `Deployment & DevOps Plan (6.0)`, and the existing GitHub Actions workflow (`6.4`).\n    *   Set up a local development environment with Docker, Checkov, and Trivy installed to replicate the CI environment for local testing.\n    *   Gain read-only access to the project's GitHub repository to analyze the existing Terraform (`.tf`) files and `Dockerfile`s.\n*   **2. Baseline Security Scans:**\n    *   Execute Checkov scans locally against the Terraform codebase to establish a baseline of current IaC security posture.\n    *   Execute Trivy scans locally against the `nexus-backend` Docker image (if available, otherwise a locally built one) to generate a baseline container vulnerability report.\n*   **Milestone & Checkpoint 1:**\n    *   **Deliverable:** Draft a formal **Security Scanning Policy**. This document will define:\n        *   The severity levels (`CRITICAL`, `HIGH`) that will cause the CI pipeline to fail for Trivy scans.\n        *   A list of specific Checkov rule IDs that should be skipped or suppressed (if any), with justifications.\n    *   **Checkpoint:** Submit the policy document to the mentor for review and approval. This policy must be finalized before implementation begins.\n\n**Week 2: CI/CD Integration**\n\n*   **3. IaC Scanning Implementation:**\n    *   In a new feature branch, modify the `github-actions.yml` workflow.\n    *   Add a new job named `iac-security-scan` that runs after the `test` job.\n    *   Implement a step within this job to run Checkov against the Terraform directory, referencing the approved policy.\n    *   **Checkpoint:** Push the branch and confirm the `iac-security-scan` job runs successfully and outputs its findings in the GitHub Actions logs without yet failing the build.\n*   **4. Container Scanning Implementation:**\n    *   Add a second new job named `container-security-scan` that runs after the `build-and-push` job.\n    *   Implement a step to run Trivy against the newly built Docker image, targeting the severities defined in the security policy.\n    *   **Checkpoint:** Confirm the `container-security-scan` job runs and correctly reports vulnerabilities in the CI logs.\n*   **5. Enforce Security Gates:**\n    *   Configure both `iac-security-scan` and `container-security-scan` jobs to exit with a failure code if they detect issues that violate the approved policy.\n    *   Modify the `deploy` job to explicitly depend on the successful completion of both new security jobs (`needs: [iac-security-scan, container-security-scan]`).\n    *   **Milestone 2:** The CI/CD pipeline is now feature-complete with non-blocking security gates integrated.\n\n**Week 3: Testing, Documentation & Delivery**\n\n*   **6. Pipeline Validation (Negative Testing):**\n    *   **Test Case 1 (IaC):** Create a temporary commit that introduces a clear security misconfiguration (e.g., a security group rule allowing all traffic from `0.0.0.0/0`).\n    *   **Checkpoint 1:** Verify that the `iac-security-scan` job fails and blocks the `deploy` job from running.\n    *   **Test Case 2 (Container):** Modify the backend `Dockerfile` to use an older base image with known `CRITICAL` vulnerabilities.\n    *   **Checkpoint 2:** Revert the IaC change, push the `Dockerfile` change, and verify that the `container-security-scan` job now fails, blocking deployment.\n*   **7. Code Review & Documentation:**\n    *   Revert all testing changes and finalize the workflow configuration.\n    *   Submit a Pull Request with the updated `github-actions.yml` for team review.\n    *   While the PR is under review, create a brief markdown document (`docs/security-scanning.md`) explaining the new security gates, how to interpret scan results, and the process for handling a legitimate failed security check.\n*   **Milestone 3 (Final Delivery):**\n    *   Address any feedback and get the Pull Request approved and merged into the `main` branch.\n    *   Ensure the new documentation is also merged and accessible to the team."
}