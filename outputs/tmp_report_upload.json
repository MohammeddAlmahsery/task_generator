{"## Project Overview": "Project Name: Nexus - Centralized Internal Tool Dashboard\nDocumentation Source: Project \"Nexus\" v1.0\n\nSummary:\nProject Nexus aims to develop a unified web dashboard to aggregate Acme Corp's disparate internal tools (HR, IT, Finance) into a single, cohesive portal. The goal is to improve employee productivity and user experience through Single Sign-On (SSO), a customizable widget-based dashboard, and centralized administration. The technical stack is built on React, Django, PostgreSQL, and is deployed on AWS using Docker and Kubernetes (EKS), with a CI/CD pipeline managed by GitHub Actions.", "## Intern Profile": "Name: Alex Chen\n\nBackground Summary:\n- A Computer Science student with a strong specialization in DevOps, cloud infrastructure, and automated testing.\n- Possesses hands-on experience with the project's core technologies, including Python, Docker, Kubernetes, AWS, Terraform, and GitHub Actions.\n- Has developed personal projects focused on building multi-stage CI/CD pipelines with integrated testing (Pytest, SonarQube) and validating Infrastructure as Code (Terraform, Checkov).", "## Task Assignment": "Task Title: Implement Automated IaC and Container Security Scanning in CI/CD Pipeline\n\nDescription:\nThis task focuses on integrating DevSecOps practices directly into the Project Nexus CI/CD pipeline. The intern will leverage their experience with Infrastructure as Code (IaC) validation by implementing Checkov to scan Terraform scripts for security misconfigurations. Additionally, they will integrate Trivy, a container vulnerability scanner, to inspect Docker images for known vulnerabilities. These scans will be added as mandatory jobs in the GitHub Actions workflow.\n\nObjective:\nTo proactively identify and prevent security vulnerabilities in both the infrastructure configuration and application containers before deployment. This will strengthen the project's security posture, reduce risk, and embed a security-first mindset into the development lifecycle.\n\nComplexity Level: Intermediate\nExpected Duration: 3 Weeks", "## Learning Opportunities": "- Gain practical experience implementing DevSecOps tools like Checkov and Trivy in a real-world, cloud-native project.\n- Deepen understanding of Infrastructure as Code (IaC) security best practices and common cloud misconfigurations.\n- Learn about container image vulnerability management and the process for triaging and mitigating security findings.\n- Enhance skills in configuring complex, multi-stage CI/CD pipelines using GitHub Actions to enforce automated quality and security gates.", "## Step-by-Step Plan": "1. Preparation Stage (Week 1)\n   - Review the Project \"Nexus\" documentation, focusing on the Technical Architecture (2.0), Deployment & DevOps Plan (6.0), and existing CI/CD workflow (6.4).\n   - Set up a local environment with the necessary tools (Checkov, Trivy, Docker) to run scans manually.\n   - Gain read-only access to the project's GitHub repository to analyze the existing Terraform scripts and Dockerfiles.\n2. Exploration Stage (Week 1)\n   - Run Checkov locally against the Terraform code to identify any existing misconfigurations.\n   - Run Trivy locally against the project's base Docker images to generate an initial vulnerability report.\n   - Propose a scanning policy: define which vulnerability severity levels (e.g., `CRITICAL`, `HIGH`) and Checkov findings should fail the CI/CD pipeline. Present this policy to the mentor for review.\n3. Implementation Stage (Week 2)\n   - Modify the `github-actions.yml` workflow file to add a new `security-scan` job.\n   - This job will include a step to run the Checkov scan against the Terraform directory.\n   - It will also include steps to build a Docker image and then run the Trivy scan against it, enforcing the approved policy.\n   - Configure the workflow so that the `deploy` job is dependent on the successful completion of the `security-scan` job.\n4. Testing & Feedback Stage (Week 3)\n   - Test the pipeline by creating a feature branch and intentionally introducing a security issue (e.g., a Terraform security group with an open port) to confirm the pipeline fails as expected.\n   - Submit a Pull Request with the updated GitHub Actions workflow and any necessary configuration files.\n   - Participate in the code review process and address any feedback from the team.\n5. Delivery Stage (Week 3)\n   - After approval, merge the Pull Request into the `main` branch.\n   - Create a brief markdown document in the repository's `docs/` folder explaining the new security gates, how to interpret scan results, and the process for handling a failed security check.", "## Next Steps\n": "- Schedule a kickoff meeting with Alex and his assigned mentor to review this task report and answer any initial questions.\n- Provide Alex with the necessary permissions to the project's GitHub repository.\n- Assign a first simple task, such as setting up the local environment, to ensure the setup process is smooth.", "## Resources & References\n": "- Project Documentation: Project \"Nexus\" v1.0\n- Checkov Documentation: [https://www.checkov.io/](https://www.checkov.io/)\n- Trivy Scanner Documentation: [https://aquasecurity.github.io/trivy/](https://aquasecurity.github.io/trivy/)\n- GitHub Actions Documentation: [https://docs.github.com/en/actions](https://docs.github.com/en/actions)", "## Check List\n": "- [ ] Security scanning policy for IaC and containers is defined and reviewed.\n- [ ] Checkov scan for Terraform code is integrated into the GitHub Actions workflow.\n- [ ] Trivy scan for Docker images is integrated into the GitHub Actions workflow.\n- [ ] The pipeline correctly fails when critical/high severity issues are detected.\n- [ ] Pull Request is reviewed, approved, and merged.\n- [ ] Documentation for the new security scanning process is complete."}